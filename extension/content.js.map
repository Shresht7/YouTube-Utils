{
  "version": 3,
  "sources": ["../src/utils/DOMElement.js", "../src/utils/YTConstants.js", "../src/lib/loop.js", "../src/lib/speed.js", "../src/lib/pip.js", "../src/content.js"],
  "sourcesContent": ["//  =======================\r\n//  DOM ELEMENT CONSTRUCTOR\r\n//  =======================\r\n\r\n/**\r\n * Utility class that constructs HTML DOM Elements\r\n */\r\nexport class DOMElement {\r\n\r\n    /**\r\n     * DOM Element Constructor\r\n     * @param {string} tagName HTML Tag\r\n     */\r\n    constructor(tagName) {\r\n        this.element = document.createElement(tagName)\r\n    }\r\n\r\n    /**\r\n     * Sets the element's ID attribute\r\n     * @param {string} id HTML Element's ID attribute\r\n     * @returns DOMElement\r\n     */\r\n    withID(id) {\r\n        this.element.id = id\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Sets the DOM element's innerHTML\r\n     * @param {string} html InnerHTML of the DOM Element\r\n     * @returns DOM Element\r\n     */\r\n    withHTML(html) {\r\n        this.element.innerHTML = html\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Sets the DOM element's innerText\r\n     * @param {string} text InnerText of the DOM Element\r\n     * @returns DOMElement\r\n     */\r\n    withText(text) {\r\n        this.element.innerText = text\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Sets the class attributes of the HTML element\r\n     * @param {string[]} classes Array of classes for the HTML element\r\n     * @returns DOM Element\r\n     */\r\n    withClasses(classes) {\r\n        this.element.classList.add(...classes)\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Sets the HTML elements style attribute\r\n     * @param {{}} styles CSS Styles attribute for the HTML element \r\n     * @returns DOM Element\r\n     */\r\n    withStyles(styles) {\r\n        for (const property in styles) {\r\n            this.element.style[property] = styles[property]\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Sets the HTML element's miscellaneous attributes\r\n     * @param {{}} attrs HTML attributes\r\n     * @returns DOM Element\r\n     */\r\n    withAttributes(attrs) {\r\n        for (const attribute in attrs) {\r\n            this.element[attribute] = attrs[attribute]\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Get the constructed DOM Element\r\n     * @returns DOM Element\r\n     */\r\n    getElement() {\r\n        return this.element\r\n    }\r\n}", "//  ==================\r\n//  YOU-TUBE CONSTANTS\r\n//  ==================\r\n\r\n/** YouTube player classes */\r\nexport const ytVideoPlayerClases = ['video-stream', 'html5-main-video']\r\n\r\n/** YouTube button class */\r\nexport const ytpButton = '.ytp-button'\r\n\r\n/** YouTube single-page-app navigation event */\r\nexport const ytNavEvent = 'yt-navigate-start'\r\n\r\n/** YouTube player controls (left-side) */\r\nexport const ytLeftControls = 'ytp-left-controls'\r\n\r\n/** YouTube player controls (right-side) */\r\nexport const ytRightControls = 'ytp-right-controls'", "//  Utils\r\nimport { DOMElement } from '../utils/DOMElement'\r\nimport { ytpButton } from '../utils/YTConstants'\r\n\r\n/** Loop Button HTML ID */\r\nconst LOOP_BTN_ID = 'yt-utils-loopControl'\r\n\r\n//  Loop Button CSS\r\n/** Loop button color */\r\nconst loopColor = { ON: '#ff0033' /* Red */, OFF: '#ffffff' /* White */ }\r\n\r\n/**\r\n * Creates and returns the loop SVG\r\n * @param {boolean} isON Video Loop Toggle State\r\n * @returns Loop SVG\r\n */\r\nconst getLoopSVG = (isON) => {\r\n    const color = isON ? loopColor.ON : loopColor.OFF\r\n    return (`\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width='24' height='24' viewBox=\"0 0 48 48\"><title>yt-utils-loopIcon</title>\r\n            <g class=\"nc-icon-wrapper\" fill=\"${color}\">\r\n                <path d=\"M24 8V2l-8 8 8 8v-6c6.63 0 12 5.37 12 12 0 2.03-.51 3.93-1.39 5.61l2.92 2.92C39.08 30.05 40 27.14 40 24c0-8.84-7.16-16-16-16zm0 28c-6.63 0-12-5.37-12-12 0-2.03.51-3.93 1.39-5.61l-2.92-2.92C8.92 17.95 8 20.86 8 24c0 8.84 7.16 16 16 16v6l8-8-8-8v6z\"/>\r\n            </g>\r\n        </svg>\r\n    `)\r\n}\r\n\r\n//  =================\r\n//  SETUP LOOP TOGGLE\r\n//  =================\r\n\r\n/**\r\n * Setup the Loop button in the YouTube video player\r\n * @param {HTMLVideoElement} videoElement HTML Video Element\r\n * @param {HTMLElement} youtubeLeftControls YouTube Player Control-Panel (Left-Side)\r\n */\r\nconst setupLoop = (videoElement, youtubeLeftControls) => {\r\n\r\n    //  Create button to toggle loop\r\n    const loopToggleBtn = new DOMElement('div')\r\n        .withID(LOOP_BTN_ID)\r\n        .withHTML(getLoopSVG(videoElement.loop))\r\n        .withClasses([ytpButton])\r\n        .withStyles({\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            opacity: 0.9,\r\n            transition: '0.1s'\r\n        })\r\n        .getElement()\r\n\r\n\r\n    //  Button click event listener - Toggles video's loop property\r\n    loopToggleBtn.addEventListener('click', () => { videoElement.loop = !videoElement.loop })\r\n\r\n    //  Observe video element for loop attribute change and change loop-SVG\r\n    const loopObserver = new MutationObserver(mutations => {\r\n        mutations.forEach(mutation => {\r\n            if (mutation.type !== 'attributes' || mutation.attributeName !== 'loop') { return }\r\n            loopToggleBtn.innerHTML = getLoopSVG(videoElement.loop)\r\n        })\r\n    })\r\n    loopObserver.observe(videoElement, { attributes: true })\r\n\r\n    //  Position the button in the YouTube LeftControl section before the Volume button (3rd ChildNode)\r\n    youtubeLeftControls.insertBefore(loopToggleBtn, youtubeLeftControls.childNodes[3])\r\n}\r\n\r\n//  ====================\r\nexport default setupLoop\r\n//  ====================", "//  Utils\r\nimport { DOMElement } from '../utils/DOMElement'\r\n\r\nconst SPEED_ID = {\r\n    ControlArea: 'yt-utils-speedControlArea',\r\n    Display: 'yt-utils-speedDisplay',\r\n    LeftChevron: 'yt-utils-speedLeftChevron',\r\n    RightChevron: 'yt-utils.speedRightChevron'\r\n}\r\n\r\n//  CONTROL PARAMETERS\r\n//  ------------------\r\n\r\n/** Speed adjustment step */\r\nconst ADJUST_SPEED = 0.5\r\n/** Minimum playback speed */\r\nconst MIN_SPEED = 0.5\r\n/** Maximum playback speed */\r\nconst MAX_SPEED = 4.0\r\n\r\n/**\r\n * Creates and returns the chevron SVG\r\n * @param {string} color Hex color code\r\n * @returns Chevron SVG\r\n */\r\nconst getChevronSVG = (color) => `\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 48 48\"><title>yt-utils-chevron</title>\r\n        <g class=\"nc-icon-wrapper\" fill=${color || '#ffffff'}>\r\n            <path d=\"M20 12l-2.83 2.83L26.34 24l-9.17 9.17L20 36l12-12z\"/>\r\n        </g>\r\n    </svg>\r\n`\r\n\r\n/**\r\n * Setup the speed control functionality\r\n * @param {HTMLVideoElement} videoElement HTML Video Element\r\n * @param {HTMLElement} youtubeLeftControls YouTube Player Control Panel (Left-Side)\r\n */\r\nconst setupSpeed = (videoElement, youtubeLeftControls) => {\r\n\r\n    /** Current playback speed */\r\n    let CURRENT_SPEED = videoElement.playbackRate   //  Initialize the Current Speed Variable\r\n\r\n    //  Speed Control Container Div\r\n    const speedControl = new DOMElement('div')\r\n        .withID(SPEED_ID.ControlArea)\r\n        .withStyles({\r\n            display: 'flex',\r\n        })\r\n        .getElement()\r\n\r\n    //  append speedControl area to YouTube LeftControl section after the time element (6th ChlidNode - after being shifted by the previous insertion)\r\n    youtubeLeftControls.insertBefore(speedControl, youtubeLeftControls.childNodes[6])\r\n\r\n    //      SPEED LEFT CHEVRON\r\n    //      ------------------\r\n\r\n    const speedLeftChevron = new DOMElement('div')\r\n        .withID(SPEED_ID.LeftChevron)\r\n        .withHTML(getChevronSVG())\r\n        .withStyles({\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            opacity: 0,\r\n            transform: 'rotate(180deg)'\r\n        })\r\n        .getElement()\r\n\r\n    //  Left chevron click event listener - Reduces playback rate\r\n    speedLeftChevron.addEventListener('click', () => { if (videoElement.playbackRate > MIN_SPEED) { videoElement.playbackRate -= ADJUST_SPEED } })\r\n\r\n    speedControl.appendChild(speedLeftChevron)\r\n\r\n    //      SPEED DISPLAY\r\n    //      -------------\r\n\r\n    //  Displays the current playback rate\r\n    const speedDisplay = new DOMElement('p')\r\n        .withID(SPEED_ID.Display)\r\n        .withText(videoElement.playbackRate.toFixed(1) + 'x')\r\n        .getElement()\r\n\r\n    speedControl.appendChild(speedDisplay)\r\n\r\n    //      SPEED RIGHT CHEVRON\r\n    //      -------------------\r\n\r\n    const speedRightChevron = new DOMElement('div')\r\n        .withID(SPEED_ID.RightChevron)\r\n        .withHTML(getChevronSVG())\r\n        .withStyles({\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            opacity: 0\r\n        })\r\n        .getElement()\r\n\r\n    //  Right chevron click event listener - Increases playback rate\r\n    speedRightChevron.addEventListener('click', () => { if (videoElement.playbackRate < MAX_SPEED) { videoElement.playbackRate += ADJUST_SPEED } })\r\n\r\n    speedControl.appendChild(speedRightChevron)\r\n\r\n    //  SPEED CONTROL OBSERVER\r\n    //  ----------------------\r\n\r\n    //  If the video duration changes (i.e. Ads), reset playback speed to the set current speed\r\n    videoElement.addEventListener('durationchange', (e) => {\r\n        e.target.playbackRate = CURRENT_SPEED\r\n    })\r\n\r\n    //  SPEED CONTROL HOVER INTERACTION\r\n    //  -------------------------------\r\n\r\n    let speedHoverTimeout\r\n    speedControl.addEventListener('mouseover', () => {\r\n        if (speedHoverTimeout) { clearTimeout(speedHoverTimeout) }\r\n        speedLeftChevron.style.opacity = 1\r\n        speedRightChevron.style.opacity = 1\r\n    })\r\n\r\n    speedControl.addEventListener('mouseleave', () => {\r\n        speedHoverTimeout = setTimeout(() => {\r\n            speedLeftChevron.style.opacity = 0\r\n            speedRightChevron.style.opacity = 0\r\n        }, 3000)\r\n    })\r\n\r\n    // Video Element Responder\r\n    videoElement.addEventListener('ratechange', (e) => {\r\n        CURRENT_SPEED = e.target.playbackRate\r\n        speedDisplay.innerText = e.target.playbackRate.toFixed(1) + 'x'\r\n    })\r\n}\r\n\r\n//  =====================\r\nexport default setupSpeed\r\n//  =====================", "//  Utils\r\nimport { DOMElement } from \"../utils/DOMElement\"\r\nimport { ytpButton } from \"../utils/YTConstants\"\r\n\r\nconst PIP_BTN_ID = 'yt-utils-pipBtn'\r\n\r\n/**\r\n * Creates and returns picture-in-picture SVG\r\n * @param {string} color \r\n * @returns PiP SVG\r\n */\r\nconst getPIPSVG = (color) => `\r\n    <svg width=\"36\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><title>yt-utils-pip</title>\r\n    <path d=\"M20 4H4C2.89543 4 2 4.89543 2 6V18C2 19.1046 2.89543 20 4 20H20C21.1046 20 22 19.1046 22 18V6C22 4.89543 21.1046 4 20 4Z\" stroke=\"${color}\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n    <path d=\"M20 13H15C13.8954 13 13 13.8954 13 15V18C13 19.1046 13.8954 20 15 20H20C21.1046 20 22 19.1046 22 18V15C22 13.8954 21.1046 13 20 13Z\" stroke=\"${color}\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n    </svg>   \r\n`\r\n\r\n//  ========================\r\n//  SETUP PICTURE-IN-PICTURE\r\n//  ========================\r\n\r\n/**\r\n * Current state of Picture-in-Picture\r\n * @type {Boolean}\r\n */\r\nlet PIPMODE = false\r\n\r\n/**\r\n * Setup the Picture-in-Picture functionality\r\n * @param {HTMLVideoElement} videoElement HTML Video Element\r\n * @param {HTMLElement} youtubeRightControls YouTube Player Control Panel (Left-Side)\r\n */\r\nconst setupPip = (videoElement, youtubeRightControls) => {\r\n\r\n    if (!document.pictureInPictureEnabled) { return }   //  Do not setup picture-in-picture if it is disabled by the user\r\n\r\n    PIPMODE = true  //  Picture-in-Picture mode enabled\r\n\r\n    //  PIP Control Button\r\n    const pipBtn = new DOMElement('div')\r\n        .withID(PIP_BTN_ID)\r\n        .withHTML(getPIPSVG('white'))\r\n        .withClasses([ytpButton])\r\n        .withStyles({\r\n            display: 'inline-flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            cursor: 'pointer',\r\n            transform: 'translateY(-12px) translateX(-2px) rotateX(180deg)'\r\n        })\r\n        .getElement()\r\n\r\n    //  Append the pip button\r\n    youtubeRightControls.insertBefore(pipBtn, youtubeRightControls.childNodes[5])\r\n\r\n    //  Toggle picture-in-picture mode on click\r\n    pipBtn.addEventListener('click', () => {\r\n        if (!PIPMODE) {\r\n            videoElement.requestPictureInPicture()\r\n        } else {\r\n            if (document.pictureInPictureElement) {\r\n                document.exitPictureInPicture()\r\n            }\r\n        }\r\n        PIPMODE = !PIPMODE\r\n    })\r\n\r\n    //  Change PIPMode SVG based on current state\r\n    videoElement.addEventListener('enterpictureinpicture', () => { pipBtn.innerHTML = getPIPSVG('red') })\r\n    videoElement.addEventListener('leavepictureinpicture', () => { pipBtn.innerHTML = getPIPSVG('white') })\r\n}\r\n\r\n//  ===================\r\nexport default setupPip\r\n//  ===================", "//  Library\r\nimport setupLoop from './lib/loop'  //  Setup Loop Toggle Button\r\nimport setupSpeed from './lib/speed'    //  Setup Speed Controls\r\nimport setupPip from './lib/pip'    //  Setup Picture-in-Picture Mode\r\n\r\n//  Utils\r\nimport { ytNavEvent, ytLeftControls, ytRightControls } from './utils/YTConstants'\r\n\r\n//  ====================\r\n//  SETUP CONTENT SCRIPT\r\n//  ====================\r\n\r\n/**\r\n * Boolean to check if the content-script has already been registered\r\n * @type {Boolean}\r\n */\r\nlet REGISTERED\r\nif (document.getElementsByTagName('video').length > 0) {                //  If the initially loaded page has video elements (i.e watch page)\r\n    setup()                                                             //  Then run setup\r\n} else {                                                                //  Else, register a nav listener\r\n    document.addEventListener(ytNavEvent, () => {\r\n        if (REGISTERED || location.pathname !== '/watch') { return }    //  Skip registration if not navigating to /watch or if already registered\r\n        setup()                                                         //  Run setup on navigation to /watch\r\n    })\r\n}\r\n\r\n//  ==============\r\n//  CONTENT SCRIPT\r\n//  ==============\r\n\r\n/**\r\n * Initializes the extension and runs the setup functions\r\n */\r\nfunction setup() {\r\n\r\n    //  REGISTRATION CHECK\r\n    if (REGISTERED || location.pathname !== '/watch') { return }    //  Do nothing if not on /watch or already registered - (redundant check)\r\n    REGISTERED = true   //  Set Content-Script Registered Boolean to true\r\n\r\n    //  DOM ELEMENTS\r\n    const videoElement = document.getElementsByTagName('video')[0]  //  YouTube Video Player\r\n    const youtubeLeftControls = document.getElementsByClassName(ytLeftControls)[0] //  YouTube Player Controls (left-side)\r\n    const youtubeRightControls = document.getElementsByClassName(ytRightControls)[0] //  YouTube Player Controls (right-side)\r\n\r\n    //  SETUP LOOP TOGGLE\r\n    setupLoop(videoElement, youtubeLeftControls)\r\n\r\n    //  SETUP SPEED CONTROL\r\n    setupSpeed(videoElement, youtubeLeftControls)\r\n\r\n    //  SETUP PIP\r\n    setupPip(videoElement, youtubeRightControls)\r\n\r\n}"],
  "mappings": "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",
  "names": []
}
